// <auto-generated />
using System;
using LabAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabAPI.Migrations
{
    [DbContext(typeof(LabApiContext))]
    [Migration("20230418153708_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LabAPI.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATA_NASCIMENTO");

                    b.Property<string>("Genero")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("GENERO");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOME_COMPLETO");

                    b.Property<string>("Telefone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("TELEFONE");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("PESSOAS");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("LabAPI.Models.Enfermeiro", b =>
                {
                    b.HasBaseType("LabAPI.Models.Pessoa");

                    b.Property<string>("COFEN_UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COFEN/UF");

                    b.Property<string>("InstituicaoEnsinoFormacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("INSTITUIÇÃO_ENSINO_FORMACAO");

                    b.ToTable("ENFERMEIROS");
                });

            modelBuilder.Entity("LabAPI.Models.Medico", b =>
                {
                    b.HasBaseType("LabAPI.Models.Pessoa");

                    b.Property<string>("CRM_UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM/UF");

                    b.Property<int>("Especializacao_Clinica")
                        .HasColumnType("int")
                        .HasColumnName("ESPECIALIZACAO_CLINICA");

                    b.Property<bool>("EstadoNoSistema")
                        .HasColumnType("bit")
                        .HasColumnName("ESTADO_NO_SISTEMA");

                    b.Property<string>("InstituicaoEnsinoFormacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INSTITUIÇÃO_ENSINO_FORMACAO");

                    b.Property<int>("TotalAtendimentos")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_ATENDIMENTOS");

                    b.ToTable("MEDICOS");
                });

            modelBuilder.Entity("LabAPI.Models.Paciente", b =>
                {
                    b.HasBaseType("LabAPI.Models.Pessoa");

                    b.Property<string>("Alergias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ALERGIAS");

                    b.Property<string>("ContatoEmergencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONTATO_EMERGENCIA");

                    b.Property<string>("Convenio")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("CONVENIO");

                    b.Property<string>("CuidadosEspecificos")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CUIDADOS_ESPECIAIS");

                    b.Property<int>("TotalAtendimentos")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_ATENDIMENTOS");

                    b.Property<int>("statusAtendimento")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_ATENDIMENTO");

                    b.ToTable("PACIENTES");
                });

            modelBuilder.Entity("LabAPI.Models.Enfermeiro", b =>
                {
                    b.HasOne("LabAPI.Models.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("LabAPI.Models.Enfermeiro", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LabAPI.Models.Medico", b =>
                {
                    b.HasOne("LabAPI.Models.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("LabAPI.Models.Medico", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LabAPI.Models.Paciente", b =>
                {
                    b.HasOne("LabAPI.Models.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("LabAPI.Models.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
